<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>学生成绩分析系统1.0</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/docx@7.1.0/build/index.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <style>
        :root {
            --primary-color: #4285f4;
            --secondary-color: #34a853;
            --accent-color: #ea4335;
            --light-color: #f8f9fa;
            --dark-color: #343a40;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f7fa;
            color: #333;
            margin: 0;
            padding: 0;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 20px 0;
            text-align: center;
            border-radius: 10px;
            margin-bottom: 30px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            margin: 0;
            font-size: 2.5rem;
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
        }
        
        .input-section {
            background-color: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            margin-bottom: 30px;
        }
        
        textarea {
            width: 100%;
            min-height: 150px;
            padding: 15px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-family: monospace;
            resize: vertical;
            transition: border 0.3s;
        }
        
        textarea:focus {
            border-color: var(--primary-color);
            outline: none;
        }
        
        .btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 50px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: bold;
            transition: all 0.3s;
            display: inline-block;
            margin-top: 15px;
        }
        
        .btn:hover {
            background-color: #3367d6;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .btn-download {
            background-color: var(--secondary-color);
            margin-left: 15px;
        }
        
        .btn-download:hover {
            background-color: #2d9248;
        }
        
        .results-section {
            display: none;
            margin-top: 30px;
        }
        
        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            transition: transform 0.3s;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-card h3 {
            color: var(--primary-color);
            margin-top: 0;
            border-bottom: 2px solid #f0f0f0;
            padding-bottom: 10px;
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: var(--dark-color);
            margin: 10px 0;
        }
        
        .chart-container {
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }
        
        .chart-title {
            text-align: center;
            color: var(--primary-color);
            margin-bottom: 20px;
        }
        
        .student-list {
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }
        
        .student-list h3 {
            color: var(--primary-color);
            margin-top: 0;
        }
        
        .student-table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .student-table th, .student-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .student-table th {
            background-color: #f8f9fa;
            font-weight: bold;
        }
        
        .student-table tr:hover {
            background-color: #f5f7fa;
        }
        
        .top-performer {
            color: var(--secondary-color);
            font-weight: bold;
        }
        
        .low-performer {
            color: var(--accent-color);
            font-weight: bold;
        }
        
        .recommendations {
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }
        
        .recommendations h3 {
            color: var(--primary-color);
            margin-top: 0;
        }
        
        .recommendations ul {
            padding-left: 20px;
        }
        
        .recommendations li {
            margin-bottom: 10px;
        }
        
        footer {
            text-align: center;
            margin-top: 50px;
            padding: 20px;
            color: #666;
            font-size: 0.9rem;
        }
        
        @media (max-width: 768px) {
            .stats-container {
                grid-template-columns: 1fr;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .btn-download {
                margin-left: 0;
                margin-top: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>学生成绩分析系统</h1>
            <div class="subtitle">测试成绩可视化分析</div>
        </header>
        
        <div class="input-section">
            <h2>输入学生成绩数据</h2>
            <p>请按以下格式输入学生成绩（姓名和分数用空格或制表符分隔，每行一个学生）：</p>
            <textarea id="scoreData" placeholder="例如：
张三 85
李四 92
王五 78
..."></textarea>
            <button id="analyzeBtn" class="btn">分析成绩</button>
            <button id="downloadBtn" class="btn btn-download" disabled>下载Word报告</button>
        </div>
        
        <div id="results" class="results-section">
            <h2>分析结果</h2>
            
            <div class="stats-container">
                <div class="stat-card">
                    <h3>学生总数</h3>
                    <div class="stat-value" id="totalStudents">0</div>
                </div>
                
                <div class="stat-card">
                    <h3>平均分</h3>
                    <div class="stat-value" id="averageScore">0</div>
                </div>
                
                <div class="stat-card">
                    <h3>最高分</h3>
                    <div class="stat-value" id="maxScore">0</div>
                    <div id="topStudents"></div>
                </div>
                
                <div class="stat-card">
                    <h3>最低分</h3>
                    <div class="stat-value" id="minScore">0</div>
                    <div id="bottomStudents"></div>
                </div>
                
                <div class="stat-card">
                    <h3>标准差</h3>
                    <div class="stat-value" id="stdDev">0</div>
                    <div>分数离散程度</div>
                </div>
                
                <div class="stat-card">
                    <h3>及格率 (≥60)</h3>
                    <div class="stat-value" id="passRate">0%</div>
                </div>
            </div>
            
            <div class="chart-container">
                <h3 class="chart-title">成绩分布直方图</h3>
                <canvas id="distributionChart"></canvas>
            </div>
            
            <div class="chart-container">
                <h3 class="chart-title">分数段占比</h3>
                <canvas id="segmentChart"></canvas>
            </div>
            
            <div class="chart-container">
                <h3 class="chart-title">成绩箱线图</h3>
                <canvas id="boxplotChart"></canvas>
            </div>
            
            <div class="student-list">
                <h3>学生成绩排名</h3>
                <div class="table-responsive">
                    <table class="student-table">
                        <thead>
                            <tr>
                                <th>排名</th>
                                <th>姓名</th>
                                <th>分数</th>
                                <th>百分位</th>
                            </tr>
                        </thead>
                        <tbody id="studentTable">
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="recommendations">
                <h3>教学建议</h3>
                <ul id="recommendationsList">
                </ul>
            </div>
        </div>
    </div>
    
    <footer>
        <p>学生成绩分析系统 &copy; 2023 | 初二物理测试数据分析工具</p>
    </footer>
    
    <script>
        // 全局变量存储分析结果
        let currentStats = null;
        let currentStudents = null;
        
        document.getElementById('analyzeBtn').addEventListener('click', analyzeScores);
        document.getElementById('downloadBtn').addEventListener('click', downloadWordReport);
        
        function analyzeScores() {
            try {
                const inputText = document.getElementById('scoreData').value;
                currentStudents = parseInput(inputText);
                
                if (currentStudents.length === 0) {
                    alert('未检测到有效数据，请检查输入格式！');
                    return;
                }
                
                // 计算统计数据
                currentStats = calculateStatistics(currentStudents);
                
                // 显示统计数据
                displayStatistics(currentStats, currentStudents);
                
                // 绘制图表
                drawCharts(currentStats, currentStudents);
                
                // 显示结果区域
                document.getElementById('results').style.display = 'block';
                document.getElementById('downloadBtn').disabled = false;
                
                // 滚动到结果区域
                document.getElementById('results').scrollIntoView({ behavior: 'smooth' });
            } catch (error) {
                console.error('分析出错:', error);
                alert('分析过程中出现错误: ' + error.message);
            }
        }
        
        async function downloadWordReport() {
            if (!currentStats || !currentStudents) {
                alert('请先分析成绩数据！');
                return;
            }
            
            try {
                const btn = document.getElementById('downloadBtn');
                btn.disabled = true;
                btn.textContent = '正在生成报告...';
                
                // 使用docx库的正确方式
                const docx = window.docx;
                const { Document, Paragraph, TextRun, HeadingLevel, Packer, ImageRun, Table, TableRow, TableCell } = docx;
                
                // 捕获图表为图片
                const chartImages = await captureChartImages();
                
                // 准备文档内容
                const doc = new Document({
                    sections: [{
                        properties: {},
                        children: [
                            new Paragraph({
                                text: "初二物理测试成绩分析报告",
                                heading: HeadingLevel.HEADING_1,
                                alignment: "center"
                            }),
                            new Paragraph({
                                text: `生成日期: ${new Date().toLocaleDateString()}`,
                                alignment: "center"
                            }),
                            new Paragraph({ text: "" }),
                            
                            // 统计概览
                            new Paragraph({
                                text: "统计概览",
                                heading: HeadingLevel.HEADING_2
                            }),
                            createStatsTable(currentStats, docx),
                            new Paragraph({ text: "" }),
                            
                            // 成绩分布图
                            new Paragraph({
                                text: "成绩分布直方图",
                                heading: HeadingLevel.HEADING_2
                            }),
                            new Paragraph({
                                children: [
                                    new ImageRun({
                                        data: chartImages.distributionChart,
                                        transformation: {
                                            width: 500,
                                            height: 300
                                        }
                                    })
                                ]
                            }),
                            new Paragraph({ text: "" }),
                            
                            // 分数段占比图
                            new Paragraph({
                                text: "分数段占比",
                                heading: HeadingLevel.HEADING_2
                            }),
                            new Paragraph({
                                children: [
                                    new ImageRun({
                                        data: chartImages.segmentChart,
                                        transformation: {
                                            width: 500,
                                            height: 300
                                        }
                                    })
                                ]
                            }),
                            new Paragraph({ text: "" }),
                            
                            // 箱线图
                            new Paragraph({
                                text: "成绩箱线图",
                                heading: HeadingLevel.HEADING_2
                            }),
                            new Paragraph({
                                children: [
                                    new ImageRun({
                                        data: chartImages.boxplotChart,
                                        transformation: {
                                            width: 500,
                                            height: 300
                                        }
                                    })
                                ]
                            }),
                            new Paragraph({ text: "" }),
                            
                            // 学生成绩表
                            new Paragraph({
                                text: "学生成绩排名",
                                heading: HeadingLevel.HEADING_2
                            }),
                            createStudentTable(currentStudents, currentStats, docx),
                            new Paragraph({ text: "" }),
                            
                            // 教学建议
                            new Paragraph({
                                text: "教学建议",
                                heading: HeadingLevel.HEADING_2
                            }),
                            ...createRecommendationsList(currentStats, docx)
                        ]
                    }]
                });
                
                // 生成并下载文档
                const blob = await Packer.toBlob(doc);
                saveAs(blob, `初二物理成绩分析报告_${new Date().toISOString().slice(0,10)}.docx`);
                
            } catch (error) {
                console.error('生成报告出错:', error);
                alert('生成报告时出错: ' + error.message);
            } finally {
                const btn = document.getElementById('downloadBtn');
                btn.disabled = false;
                btn.textContent = '下载Word报告';
            }
        }
        
        async function captureChartImages() {
            const charts = {
                distributionChart: document.getElementById('distributionChart'),
                segmentChart: document.getElementById('segmentChart'),
                boxplotChart: document.getElementById('boxplotChart')
            };
            
            const images = {};
            
            for (const [name, canvas] of Object.entries(charts)) {
                const blob = await new Promise(resolve => {
                    html2canvas(canvas).then(canvas => {
                        canvas.toBlob(resolve, 'image/png');
                    });
                });
                
                const arrayBuffer = await blob.arrayBuffer();
                images[name] = arrayBuffer;
            }
            
            return images;
        }
        
        function createStatsTable(stats, docx) {
            const { Table, TableRow, TableCell, Paragraph } = docx;
            
            return new Table({
                rows: [
                    new TableRow({
                        children: [
                            new TableCell({ children: [new Paragraph("学生总数")] }),
                            new TableCell({ children: [new Paragraph(stats.total.toString())] })
                        ]
                    }),
                    new TableRow({
                        children: [
                            new TableCell({ children: [new Paragraph("平均分")] }),
                            new TableCell({ children: [new Paragraph(stats.average.toFixed(1))] })
                        ]
                    }),
                    new TableRow({
                        children: [
                            new TableCell({ children: [new Paragraph("最高分")] }),
                            new TableCell({ children: [new Paragraph(stats.max.toString())] })
                        ]
                    }),
                    new TableRow({
                        children: [
                            new TableCell({ children: [new Paragraph("最低分")] }),
                            new TableCell({ children: [new Paragraph(stats.min.toString())] })
                        ]
                    }),
                    new TableRow({
                        children: [
                            new TableCell({ children: [new Paragraph("标准差")] }),
                            new TableCell({ children: [new Paragraph(stats.stdDev.toFixed(1))] })
                        ]
                    }),
                    new TableRow({
                        children: [
                            new TableCell({ children: [new Paragraph("及格率 (≥60)")] }),
                            new TableCell({ children: [new Paragraph(stats.passRate.toFixed(1) + "%")] })
                        ]
                    })
                ]
            });
        }
        
        function createStudentTable(students, stats, docx) {
            const { Table, TableRow, TableCell, Paragraph } = docx;
            
            const rows = [
                new TableRow({
                    children: [
                        new TableCell({ children: [new Paragraph("排名")] }),
                        new TableCell({ children: [new Paragraph("姓名")] }),
                        new TableCell({ children: [new Paragraph("分数")] }),
                        new TableCell({ children: [new Paragraph("百分位")] })
                    ]
                })
            ];
            
            students.forEach((student, index) => {
                rows.push(new TableRow({
                    children: [
                        new TableCell({ children: [new Paragraph((index + 1).toString())] }),
                        new TableCell({ children: [new Paragraph(student.name)] }),
                        new TableCell({ children: [new Paragraph(student.score.toString())] }),
                        new TableCell({ children: [new Paragraph(stats.percentiles[index].toFixed(1) + "%")] })
                    ]
                }));
            });
            
            return new Table({
                rows: rows,
                width: { size: 100, type: "pct" }
            });
        }
        
        function createRecommendationsList(stats, docx) {
            const { Paragraph } = docx;
            const recommendations = generateRecommendations(stats);
            
            return recommendations.map(rec => new Paragraph({
                text: rec,
                bullet: { level: 0 }
            }));
        }
        
        function parseInput(inputText) {
            const lines = inputText.split('\n');
            const students = [];
            
            for (const line of lines) {
                // 处理每行可能包含多个学生数据的情况（用制表符或空格分隔）
                const items = line.split(/\s+/).filter(item => item.trim() !== '');
                
                // 成对处理姓名和分数
                for (let i = 0; i < items.length; i += 2) {
                    if (i + 1 >= items.length) break;
                    
                    const name = items[i];
                    const score = parseFloat(items[i + 1]);
                    
                    if (!isNaN(score)) {
                        students.push({ name, score });
                    }
                }
            }
            
            // 按分数降序排序
            students.sort((a, b) => b.score - a.score);
            
            return students;
        }
        
        function calculateStatistics(students) {
            const scores = students.map(s => s.score);
            const total = scores.length;
            const sum = scores.reduce((a, b) => a + b, 0);
            const average = sum / total;
            const max = Math.max(...scores);
            const min = Math.min(...scores);
            
            // 计算标准差
            const squaredDiffs = scores.map(score => Math.pow(score - average, 2));
            const variance = squaredDiffs.reduce((a, b) => a + b, 0) / total;
            const stdDev = Math.sqrt(variance);
            
            // 计算及格率
            const passCount = scores.filter(score => score >= 60).length;
            const passRate = (passCount / total) * 100;
            
            // 计算百分位数
            const percentiles = students.map((student, index) => {
                return ((total - index) / total) * 100;
            });
            
            // 计算分数段分布
            const segments = [
                { name: '90-100', min: 90, max: 100, count: 0 },
                { name: '80-89', min: 80, max: 89, count: 0 },
                { name: '70-79', min: 70, max: 79, count: 0 },
                { name: '60-69', min: 60, max: 69, count: 0 },
                { name: '50-59', min: 50, max: 59, count: 0 },
                { name: '40-49', min: 40, max: 49, count: 0 },
                { name: '30-39', min: 30, max: 39, count: 0 },
                { name: '0-29', min: 0, max: 29, count: 0 }
            ];
            
            for (const score of scores) {
                for (const segment of segments) {
                    if (score >= segment.min && score <= segment.max) {
                        segment.count++;
                        break;
                    }
                }
            }
            
            // 计算四分位数
            const sortedScores = [...scores].sort((a, b) => a - b);
            const q1 = calculatePercentile(sortedScores, 25);
            const median = calculatePercentile(sortedScores, 50);
            const q3 = calculatePercentile(sortedScores, 75);
            const iqr = q3 - q1;
            
            return {
                total,
                average,
                max,
                min,
                stdDev,
                passRate,
                percentiles,
                segments,
                scores: sortedScores,
                q1,
                median,
                q3,
                iqr
            };
        }
        
        function calculatePercentile(sortedArray, percentile) {
            const index = (percentile / 100) * (sortedArray.length - 1);
            const lower = Math.floor(index);
            const upper = Math.ceil(index);
            
            if (lower === upper) {
                return sortedArray[lower];
            }
            
            // 线性插值
            return sortedArray[lower] + (sortedArray[upper] - sortedArray[lower]) * (index - lower);
        }
        
        function displayStatistics(stats, students) {
            document.getElementById('totalStudents').textContent = stats.total;
            document.getElementById('averageScore').textContent = stats.average.toFixed(1);
            document.getElementById('maxScore').textContent = stats.max;
            document.getElementById('minScore').textContent = stats.min;
            document.getElementById('stdDev').textContent = stats.stdDev.toFixed(1);
            document.getElementById('passRate').textContent = stats.passRate.toFixed(1) + '%';
            
            // 显示最高分学生
            const topStudents = students.filter(s => s.score === stats.max);
            document.getElementById('topStudents').innerHTML = topStudents.map(s => 
                `<span class="top-performer">${s.name}</span>`
            ).join(', ');
            
            // 显示最低分学生
            const bottomStudents = students.filter(s => s.score === stats.min);
            document.getElementById('bottomStudents').innerHTML = bottomStudents.map(s => 
                `<span class="low-performer">${s.name}</span>`
            ).join(', ');
            
            // 生成学生表格
            const tableBody = document.getElementById('studentTable');
            tableBody.innerHTML = '';
            
            students.forEach((student, index) => {
                const row = document.createElement('tr');
                
                if (student.score === stats.max) {
                    row.classList.add('top-performer');
                } else if (student.score === stats.min) {
                    row.classList.add('low-performer');
                }
                
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${student.name}</td>
                    <td>${student.score}</td>
                    <td>${stats.percentiles[index].toFixed(1)}%</td>
                `;
                
                tableBody.appendChild(row);
            });
            
            // 生成教学建议
            const recommendations = generateRecommendations(stats);
            const recList = document.getElementById('recommendationsList');
            recList.innerHTML = recommendations.map(rec => `<li>${rec}</li>`).join('');
        }
        
        function generateRecommendations(stats) {
            const recs = [];
            
            recs.push(`本次考试平均分 ${stats.average.toFixed(1)} 分，标准差 ${stats.stdDev.toFixed(1)}，显示成绩离散度${stats.stdDev > 20 ? '较高' : '适中'}`);
            
            if (stats.passRate < 50) {
                recs.push('及格率偏低（仅' + stats.passRate.toFixed(1) + '%），建议加强基础知识点教学');
            } else if (stats.passRate < 70) {
                recs.push('及格率中等（' + stats.passRate.toFixed(1) + '%），可针对中等生进行提升训练');
            } else {
                recs.push('及格率良好（' + stats.passRate.toFixed(1) + '%），继续保持并关注后进生');
            }
            
            if (stats.median < 60) {
                recs.push('中位数分数低于及格线，表明超过半数学生未掌握核心知识点');
            }
            
            if (stats.segments[0].count / stats.total > 0.15) {
                recs.push('高分段学生占比超过15%，可考虑为这部分学生设计拓展内容');
            }
            
            if (stats.segments[stats.segments.length - 1].count / stats.total > 0.2) {
                recs.push('低分段学生占比超过20%，需重点关注并制定个性化辅导计划');
            }
            
            recs.push('建议将学生分为3组教学：高分组（≥70分）注重能力提升，中间组（40-69分）强化基础，低分组（<40分）重新梳理核心概念');
            recs.push('针对标准差较大的情况，建议增加分层作业和个性化学习任务');
            recs.push('下次考试前可针对30-59分数段学生进行集中强化训练，这是提升整体成绩的关键群体');
            
            return recs;
        }
        
        function drawCharts(stats, students) {
            // 销毁之前的图表实例
            const chartElements = ['distributionChart', 'segmentChart', 'boxplotChart'];
            chartElements.forEach(id => {
                const chart = Chart.getChart(id);
                if (chart) {
                    chart.destroy();
                }
            });

            // 成绩分布直方图
            const distributionCtx = document.getElementById('distributionChart').getContext('2d');
            new Chart(distributionCtx, {
                type: 'bar',
                data: {
                    labels: stats.segments.map(s => s.name),
                    datasets: [{
                        label: '学生人数',
                        data: stats.segments.map(s => s.count),
                        backgroundColor: [
                            '#4285f4', '#34a853', '#fbbc05', '#ea4335',
                            '#4285f4', '#34a853', '#fbbc05', '#ea4335'
                        ],
                        borderColor: [
                            '#3367d6', '#2d9248', '#e2a908', '#d33426',
                            '#3367d6', '#2d9248', '#e2a908', '#d33426'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: '成绩分布直方图',
                            font: {
                                size: 16
                            }
                        },
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `${context.parsed.y} 人 (${(context.parsed.y / stats.total * 100).toFixed(1)}%)`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: '学生人数'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: '分数段'
                            }
                        }
                    }
                }
            });
            
            // 分数段占比饼图
            const segmentCtx = document.getElementById('segmentChart').getContext('2d');
            new Chart(segmentCtx, {
                type: 'pie',
                data: {
                    labels: stats.segments.map(s => s.name),
                    datasets: [{
                        data: stats.segments.map(s => s.count),
                        backgroundColor: [
                            '#4285f4', '#34a853', '#fbbc05', '#ea4335',
                            '#a142f4', '#a8e332', '#f98e59', '#e57373'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: '分数段占比',
                            font: {
                                size: 16
                            }
                        },
                        legend: {
                            position: 'right'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const value = context.parsed;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${context.label}: ${value}人 (${percentage}%)`;
                                }
                            }
                        },
                        datalabels: {
                            formatter: (value, ctx) => {
                                const total = ctx.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = (value * 100 / total).toFixed(1);
                                return percentage + '%';
                            },
                            color: '#fff',
                            font: {
                                weight: 'bold'
                            }
                        }
                    }
                },
                plugins: [ChartDataLabels]
            });
            
            // 成绩箱线图 - 使用折线图模拟
            const boxplotCtx = document.getElementById('boxplotChart').getContext('2d');
            new Chart(boxplotCtx, {
                type: 'line',
                data: {
                    labels: ['最小值', 'Q1', '中位数', 'Q3', '最大值'],
                    datasets: [{
                        label: '成绩分布',
                        data: [stats.min, stats.q1, stats.median, stats.q3, stats.max],
                        backgroundColor: 'rgba(66, 133, 244, 0.5)',
                        borderColor: '#4285f4',
                        borderWidth: 2,
                        pointBackgroundColor: ['#ea4335', '#4285f4', '#34a853', '#4285f4', '#ea4335'],
                        pointRadius: 6,
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: '成绩箱线图 (五数概括)',
                            font: {
                                size: 16
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `${context.dataset.label}: ${context.parsed.y}`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            title: {
                                display: true,
                                text: '分数'
                            }
                        }
                    }
                }
            });
        }
    </script>
</body>
</html>
